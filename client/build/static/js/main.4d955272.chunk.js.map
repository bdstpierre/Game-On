{"version":3,"sources":["reportWebVitals.js","utils/auth.js","components/HomePage.js","utils/queries.js","components/UserPage.js","utils/mutations.js","components/Login.js","components/SignUp.js","components/ChallengeCreate.js","components/ChallengePage.js","components/FindUser.js","App.js","index.js","reducers/index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","HomePage","padding","paddingBottom","fontFamily","Card","className","Img","style","margin","minHeight","src","alt","ImgOverlay","height","variant","Body","Title","Text","Auth","loggedIn","Button","width","size","type","Link","href","Component","QUERY_USER","gql","QUERY_CATEGORY","QUERY_COMPETITION","QUERY_LOSS","QUERY_WIN","QUERY_TIES","UserPage","winObj","useQuery","tieObj","data","error","loading","console","log","wins","length","ties","loss","losses","userName","getProfile","name","handleCreateChallenge","event","a","home","origin","newPage","e","profile","color","display","justifyContent","alignItem","card","marginBottom","Form","Figure","Image","fontSize","Table","background","striped","bordered","hover","ListGroup","Item","as","onClick","LOGIN_USER","ADD_USER","CREATE_COMPETITION","UPDATE_COMPETITION","CONFIRM_COMPETITION","Login","props","useState","email","password","formState","setFormState","useMutation","login","handleFormSubmit","preventDefault","variables","mutationResponse","handleChange","target","value","signup","textAlign","fontWeight","fluid","maxWidth","postition","top","onSubmit","Group","controlId","Label","Control","placeholder","id","onChange","bg","SignUp","zipCode","addUser","text","textbox","marginTop","ChallengeCreate","organizer","challenged","date","category","categoryList","userList","cError","userData","forEach","element","push","user","createCompetition","_id","Select","selected","map","challengedName","toString","options","ChallengePage","victor","organizerScore","challengedScore","status","resultsConfirmed","ChallengeUpdate","split","competition","Check","label","FindUser","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","Navbar","Container","Brand","Nav","logout","Row","Col","exact","path","component","loggerMIddleware","createLogger","store","createStore","state","applyMiddleware","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.4d955272.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Auth from '../utils/auth'\n\n\n\n\nclass HomePage extends Component {\n  render() {\n\n    const logo = {\n      height: \"25rem\",\n    }\n\n    const padding = {\n      paddingBottom: \"10px\",\n      fontFamily: \"Good Times\"\n    }\n    \n    const loginButton = {\n      width: \"45%\"\n    }\n\n    const backgroundImg = {\n      margin: \"0\",\n      padding: \"0\",\n      minHeight: \"100vh\"\n    }\n    return (\n      <>\n    \n      \n      <Card className=\"text-center\">\n        <Card.Img style={backgroundImg} src=\"/img/862202--1-@1x.png\" alt=\"Carad image\" />\n        <Card.ImgOverlay>\n        <Card.Img style={logo} variant=\"top\" src=\"/img/GameOnLogo.svg\" />\n        <Card.Body className=\"text-white\">\n          <Card.Title style={padding} >The Spit-and-a-Handshake App</Card.Title>\n            <Card.Text >\n             Do you want to challenge someone to a duel? (Well, maybe not a REAL duel...)\n\n             How about a friendly game of \"H-O-R-S-E\"? A quick tennis match? A round of 8-Ball? \n\n             Game-On can help you organize, and keep track of, your bets and challenges with friends. \n\n             Just signup, or login, create a challenge, and find a friend to prove you're competitive prowess.\n            </Card.Text>\n        </Card.Body>\n        {Auth.loggedIn() ? (\"\") : (\n        <>\n        <Button style={loginButton} size=\"lg\" variant=\"primary\" type=\"submit\">\n            Login\n          </Button>\n\n        <Card.Body>\n          <Card.Link style={padding} className=\"text-center text-light\" href=\"/SignUp\">Don't have an account? Click here!</Card.Link>\n        </Card.Body>\n        </>\n        )}\n        </Card.ImgOverlay>\n      </Card>\n      \n      </>\n    )\n  }\n}\n\nexport default HomePage\n\n","import { gql } from '@apollo/client';\n\nexport const QUERY_USER = gql`\n  query users {\n    user {\n      _id\n      name\n      email\n      zipCode\n    }\n  }\n`;\n\nexport const QUERY_CATEGORY = gql`\n  query category($_id: ID) {\n      category(_id: $_id) {\n        _id\n        name\n      }\n  }\n  `;\n\n  export const QUERY_CATEGORIES = gql`\n  query categories {\n      categories {\n        _id\n        name\n      }\n  }\n  `;\n\nexport const QUERY_COMPETITION = gql`\n  query competition($_id: ID) {\n    competition(_id: $_id) {\n        _id\n        name\n        location\n        category\n        organizer\n        challenged\n        challengedAccept\n        date\n        victor\n        organizerScore\n        challengedScore\n        category\n        status\n        resultsConfirmed\n    }\n  }\n`;\n\nexport const QUERY_LOSS = gql`\nquery losses {\n  losses {\n    _id\n    name\n    location\n    organizer\n    challenged\n    challengedAccept\n    date\n    victor\n    organizerScore\n    challengedScore\n    category\n    status\n    resultsConfirmed\n  }\n}\n`;\n\nexport const QUERY_WIN = gql`\nquery wins {\n  wins {\n    _id\n    name\n    location\n    organizer\n    challenged\n    challengedAccept\n    date\n    victor\n    organizerScore\n    challengedScore\n    category\n    status\n    resultsConfirmed\n  }\n}\n`;\n\nexport const QUERY_TIES = gql`\n  query ties {\n    ties {\n      _id\n      name\n      location\n      organizer\n      challenged\n      challengedAccept\n      date\n      victor\n      organizerScore\n      challengedScore\n      category\n      status\n      resultsConfirmed\n    }\n  }\n`;","import React, { Component, useState } from 'react';\nimport { useQuery} from '@apollo/client';\nimport { QUERY_WIN, QUERY_LOSS, QUERY_TIES } from '../utils/queries'\nimport Auth from '../utils/auth'\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport Figure from 'react-bootstrap/Figure';\nimport Table from 'react-bootstrap/Table';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\n// class UserPage extends Component {\n//   render() {\n\nconst UserPage = () => {\n  const winObj = useQuery(QUERY_WIN);\n  const tieObj = useQuery(QUERY_TIES);\n  const { data, error, loading} = useQuery(QUERY_LOSS);\n\n  if (loading || winObj.loading || tieObj.loading) {\n    return <h2>LOADING...</h2>\n  }\n  \n  console.log(winObj)\n  console.log(tieObj)\n  console.log(data)\n\n  const wins = winObj.data.wins.length\n  const ties = tieObj.data.ties.length\n  const loss = data.losses.length\n\n  let userData = Auth.getProfile();\n  let userName = userData.data.name;\n\n  const handleCreateChallenge = async event => {\n    try {\n      const home = window.location.origin;\n      const newPage = home + \"/challengecreate\";\n      window.location.href = newPage;\n\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  const profile = {\n    color: \"#00FC2A\",\n    fontFamily: \"Good Times\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItem: \"center\"\n  }\n  const name = {\n    color: \"#00FC2A\",\n    fontFamily: \"Good Times\",\n    fontSize: \"25px\",\n  }\n  const stats = {\n    fontFamily: \"Good Times\",\n    background: \"white\"\n  }\n\n  const backgroundImg = {\n    margin: \"0\",\n    padding: \"0\",\n    minHeight: \"100vh\"\n  }\n\n  const challenges = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    margin: \"0 auto\",\n    justifyContent: \"center\",\n    alignItem: \"center\",\n\n\n  }\n  const chalbut = {\n    margin: \"0 auto\",\n    display: \"block\",\n  }\n\n  const card = {\n    marginBottom: \"10px\",\n    width: \"18rem\"\n  }\n\n\n    return (\n      <>\n      <Card>\n      <Card.Img style={backgroundImg} src=\"/img/343962@1x.png\" alt=\"Card image\" />\n        <Card.ImgOverlay>\n\n      <h1 style={profile} className=\"text-center text-white\">Profile</h1>\n     <Form className=\"signUp-form text-white\">\n      <Figure style={profile}>\n        <Figure.Image\n         width={171}\n          height={180}\n          alt=\"171x180\"\n          src=\"/img/profileavatar.png\"\n          />\n      </Figure>\n        <h1 style={name}className=\"font-weight-bold text-center text-white\">{userName}\n        </h1>\n        <Table style={stats}striped bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th>Wins</th>\n              <th>Loses</th>\n              <th>Ties</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{wins}</td>\n              <td>{loss}</td>\n              <td>{ties}</td>\n            </tr>\n          </tbody>\n        </Table>\n        {/* <div style={challenges}> */}\n        <Card style={card} className=\"text-dark\">\n          <ListGroup  variant=\"flush\">\n            <ListGroup.Item variant=\"success\" as=\"h4\">Current Challenges</ListGroup.Item>\n            <ListGroup.Item>Cras justo odio</ListGroup.Item>\n            <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\n            <ListGroup.Item>Vestibulum at eros</ListGroup.Item>\n          </ListGroup>\n        </Card>\n        \n        <Card style={card} className=\"text-dark\">\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item variant=\"danger\" as=\"h4\">Previous Challenges</ListGroup.Item>\n              <ListGroup.Item>Cras justo odio</ListGroup.Item>\n              <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\n              <ListGroup.Item>Vestibulum at eros</ListGroup.Item>\n            </ListGroup>\n        </Card>\n\n\n          {/* <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n              Current Challenges\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n              <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n              <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n          <Dropdown>\n            <Dropdown.Toggle style={color} variant=\"success\" id=\"dropdown-basic\">\n              Previous Challenges\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n              <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n              <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown> */}\n         {/* </div>  */}\n        <Button style={chalbut}className=\"btn-lg\" onClick={handleCreateChallenge}>\n          Challenge Someone\n         </Button>\n       \n      \n\n      </Form>\n\n      </Card.ImgOverlay>\n\n      </Card>\n      </>\n    )\n\n  }\n// }\n\nexport default UserPage","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login(\n    $email: String!, \n    $password: String!) {\n    login(\n      email: $email, \n      password: $password) {\n        token\n        user {\n          _id\n          name\n      }\n    }\n  }\n`;\n\n// firstName - lastName?\nexport const ADD_USER = gql`\n  mutation addUser( \n    $name: String!, \n    $email: String!,\n    $password: String!, \n    $zipCode: String!) {\n    addUser( \n      name: $name, \n      email: $email,\n      password: $password,\n      zipCode: $zipCode) {\n        token\n        user {\n        _id\n        name\n        email\n        zipCode\n      }\n    }\n  }\n`;\n\nexport const CREATE_CATEGORY = gql`\n  mutation createCategory(\n    $_id: ID!, \n    $name: String!) {\n    createCategory(\n      _id: $_id, \n      name: $name) {\n        _id\n        name\n    }\n  }\n`;\n\nexport const CREATE_COMPETITION = gql`\n  mutation createCompetition(\n    $name: String!, \n    $location: String!, \n    $organizer: String!, \n    $challenged: String!,\n    $date: String!,\n    $category: String!) {\n    createCompetition(\n      name: $name, \n      location: $location, \n      organizer: $organizer, \n      challenged: $challenged, \n      date: $date,\n      category: $category) {\n        _id\n        name\n        location\n        category\n        organizer\n        challenged\n        challengedAccept\n        date\n    }\n  }\n`;\n\nexport const UPDATE_COMPETITION = gql`\n  mutation udpateCompetition(\n    $_id: ID!, \n    $victor: String!, \n    $organizerScore: String!, \n    $challengedScore: String!, \n    $status: String!) {\n    updateCompetition(\n      _id: $_id, \n      victor: $victor, \n      organizerScore: $organizerScore, \n      challengedScore: $challengedScore, \n      status: $status) {\n        _id\n        victor\n        organizerScore\n        challengedScore\n        status\n    }\n  }\n`;\n\nexport const CONFIRM_COMPETITION = gql`\n  mutation confirmCompetition(\n    $_id: ID!, \n    $resultsConfirmed: Boolean!) {\n    confirmCompetition(\n      _id: $_id, \n      resultsConfirmed: $resultsConfirmed) {\n        _id\n        resultsConfirmed\n    }\n  }\n`;\n","\nimport React, { Component, useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\nconst textbox = {\n    width: \"400px\",\n    margin: \"0 auto\",\n    marginBottom: \"0px\",\n    postition: \"relative\",\n    top: \"-125px\"\n}\nconst signup = {\n    display: \"block\",\n    textAlign: \"center\",\n    color: \"white\"\n}\nconst color = {\n  color: \"#00FC2A\",\n  fontWeight: \"900\",\n  fontFamily: \"Good Times\"\n}\nconst backgroundImg = {\n  margin: \"0\",\n  padding: \"0\",\n  minHeight: \"100vh\"\n}\n\nconst logo = {\n  display: \"block\",\n  maxWidth: \"800px\",\n  margin: \"0 auto\"\n\n}\n\n\n  return (\n    <Card>\n      <Card.Img style={backgroundImg} src=\"/img/80-s-retro@1x.png\" fluid alt=\"Card image\" />\n      <Card.ImgOverlay>\n      <Card.Img style={logo}  variant=\"top\" src=\"/img/GameOnLogo.svg\" />\n      <Card.Body>\n      <Form style={textbox} onSubmit={handleFormSubmit}>\n        <Form.Group className=\"mb-3 text-white\" controlId=\"formBasicEmail\">\n          <Form.Label style={color}>Email address</Form.Label>\n          <Form.Control  \n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange} />\n          <Form.Text style={signup} bg=\"light\">\n            We'll never share your email with anyone else.\n          </Form.Text>\n        </Form.Group>\n\n        <Form.Group className=\"mb-3 text-white\" controlId=\"formBasicPassword\">\n          <Form.Label style={color}>Password</Form.Label>\n          <Form.Control  \n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange} />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Login\n        </Button>\n      </Form>\n      </Card.Body>\n      <Card.Body>\n        <Card.Link style={signup} bg=\"light\" className=\"text-center\" href=\"/SignUp\">Don't have an account? Click here!</Card.Link>\n      </Card.Body>\n      </Card.ImgOverlay>\n    </Card>\n  );\n};\n\nexport default Login","import React, { Component, useState } from 'react';\nimport { useMutation } from '@apollo/client';\n// import \"./LoginWeb.css\";\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\n\nfunction SignUp(props) {\n  const [formState, setFormState] = useState({ name: '', email: '', password: '', zipCode: '' });\n  const [SignUp, { error }] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await SignUp({\n        variables: { name: formState.name, email: formState.email, password: formState.password, zipCode: formState.zipCode },\n      });\n      const token = mutationResponse.data.addUser.token;\n      console.log(token);\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const logo = {\n    height: \"20rem\",\n  }\n\n  const signuptext = {\n    fontFamily: \"Good Times\",\n    color: \"#00FC2A\"\n  }\n\n  const text = {\n    fontFamily: \"Good Times\",\n    color: \"#00FC2A\",\n    fontWeight: \"900\"\n  }\n\n  const textbox = {\n    width: \"500px\",\n    margin: \"0 auto\",\n    marginBottom: \"10px\"\n  }\n\n  const signUpButton = {\n    margin: \"0 auto\",\n    display: \"block\",\n    marginTop: \"20px\"\n  }\n\n  const backgroundImg = {\n    margin: \"0\",\n    padding: \"0\",\n    minHeight: \"100vh\"\n  }\n\n    return (\n      <>\n    <Card bg=\"dark\">\n      <Card.Img style={backgroundImg} src=\"/img/344034@1x.png\" alt=\"Card image\" />\n        <Card.ImgOverlay>\n\n      <Form onSubmit={handleFormSubmit} className=\"SignUp-form\">\n      <Card.Img style={logo} variant=\"top\" src=\"/img/GameOnLogo.svg\" />\n\n        <h1 style={signuptext} className=\"font-weight-bold text-center\">Sign-Up Here!\n        </h1>\n        <Form.Group style={textbox}>\n          <Form.Label style={text}>Full Name</Form.Label>\n          <Form.Control \n          type=\"name\" \n          placeholder=\"Full Name\"\n          name=\"name\"\n          id=\"email\"\n          onChange={handleChange} />\n        </Form.Group>\n        <Form.Group style={textbox}>\n          <Form.Label style={text}>Email</Form.Label>\n          <Form.Control           \n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange} />\n        </Form.Group>\n        <Form.Group style={textbox}>\n          <Form.Label style={text}>Zip Code</Form.Label>\n          <Form.Control \n            type=\"text\" \n            placeholder=\"Zip Code\"\n            name=\"zipCode\"\n            id=\"email\"/>\n        </Form.Group>\n        <Form.Group  style={textbox}>\n          <Form.Label style={text}>Password</Form.Label>\n          <Form.Control     \n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"password\"\n            onChange={handleChange}/>\n      </Form.Group>\n        <Button style={signUpButton} type=\"submit\" className=\"btn-lg btn-Primary btn-block\">\n          Sign Up\n        </Button>\n\n      </Form>\n\n      </Card.ImgOverlay>\n\n    </Card>\n      </>\n    );\n  }\n\nexport default SignUp;","import React, { Component, useState } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport { useQuery, useMutation } from '@apollo/client';\n// import \"./LoginWeb.css\";\nimport { CREATE_COMPETITION } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport { QUERY_CATEGORY } from '../utils/queries';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction ChallengeCreate(props) {\n  let me = Auth.getProfile();\n  let organizer = me.data.name;\n\n  const [formState, setFormState] = useState({ name: '', location: '', organizer: organizer, challenged: '', date: '', category: ''});\n  const [ChallengeCreate, { error }] = useMutation( CREATE_COMPETITION);\n  let categoryList=[];\n  let userList = [];\n\n  // Get the list of categories\n  const { data, cError, loading } = useQuery(QUERY_CATEGORY);\n    // Get the list of users\n  const userData = useQuery(QUERY_USER);\n\n  if (loading || userData.loading) {\n    return <h2>LOADING...</h2>\n  }\n\n  data.category.forEach(element => {\n    categoryList.push(element.name)\n  });\n  userData.data.user.forEach(element => {\n    userList.push(element.name)\n  });\n\n  // Handle the data upon clicking the submit button\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n\n      const mutationResponse = await ChallengeCreate({\n        variables: { name: formState.name, location: formState.location, organizer: formState.organizer, challenged: formState.challenged, date: formState.date, category: formState.category},\n      });\n\n      const token = mutationResponse.data.createCompetition.token;\n      console.log(mutationResponse);\n\n      let id = mutationResponse.data.createCompetition._id;\n\n      const home = window.location.origin;\n      const newPage = home + \"//challengepage/:\" + id;\n      window.location.href = newPage;\n\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Updatet he form state as data is updated in the form.\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n    return (\n      <Card>\n      <Card.Img src=\"/img/862202--1-@1x.png\" alt=\"Card image\" />\n        <Card.ImgOverlay>\n\n      <Card.Img variant=\"top\" src=\"/img/GameOnLogo.svg\" />\n     <Form onSubmit={handleFormSubmit} className=\"signUp-form text-white\">\n        <h1 className=\"font-weight-bold text-center text-white\">Matchup\n        </h1>\n        <h6 className=\"font-weight-bold text-center text-white\">\n          \"organizer\" VS. \"challenged\"\n        </h6>\n        <Form.Group>\n          <Form.Label>Competition Category</Form.Label>\n          <Form.Select \n            aria-label=\"Select challenge category\" \n            id=\"category\"\n            name=\"category\"\n            onChange={(selected) => {\n              const category = selected.target.value;\n              setFormState({\n                ...formState,\n                category: category,\n              });\n            }}>\n          <option>Select a category</option>\n          {categoryList.map((category) => \n            <option key={category} value={category}>{category}</option>\n          )}\n          </Form.Select>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Competion Name</Form.Label>\n          <Form.Control \n          type=\"text\" \n          placeholder=\"The Thrilla in Manilla\"\n          id=\"name\"\n          name=\"name\"\n          onChange={handleChange} />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Location</Form.Label>\n          <Form.Control \n          type=\"text\" \n          placeholder=\"Location\"\n          id=\"location\"\n          name=\"location\"\n          onChange={handleChange} />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Date</Form.Label>\n          <Form.Control \n          type=\"text\" \n          placeholder=\"Event Date: MM/DD/YYYY\"\n          id=\"date\"\n          name=\"date\"\n          onChange={handleChange} />\n        </Form.Group>\n        <Form.Group>\n        <Form.Label>Person to challenge</Form.Label>\n        {/* <Form.Control */}\n        <Typeahead\n          type=\"text\"\n          id=\"challenged\"\n          name=\"challenged\"\n          controlId=\"challenged\"\n          placeholder=\"Start typing a user name\"\n          onChange={(selected) => {\n            let challengedName = selected.toString()\n            setFormState({\n              ...formState,\n              challenged: challengedName,\n            });\n          }}\n          options={userList}\n          />\n        </Form.Group>\n        <Button type=\"submit\" className=\"btn-lg\">\n          Create Matchup\n         </Button>\n       </Form>\n    </Card.ImgOverlay>\n  </Card>\n    );\n  }\n\nexport default ChallengeCreate;\n\n","import React, { Component, useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { Link } from \"react-router-dom\";\nimport { UPDATE_COMPETITION, CONFIRM_COMPETITION } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport { QUERY_COMPETITION } from '../utils/queries';\n\nfunction ChallengePage(props) {\n  let me = Auth.getProfile();\n  let organizerName = me.data.name;\n\n  const [formState, setFormState] = useState({  victor: '', organizerScore: '', challengedScore: '', status: '', resultsConfirmed: '' });\n  const [ChallengeUpdate] = useMutation( UPDATE_COMPETITION);\n  const [ChallengeConfirm] = useMutation( CONFIRM_COMPETITION);\n\n  const home = window.location.href;\n  const id = home.split(\":\")[3];\n\n  const { data, error, loading } = useQuery(QUERY_COMPETITION, {variables : {_id: id}});\n\n  if (loading) {\n    return <h2>LOADING...</h2>\n    }\n\n    console.log(data.competition[0]);\n    console.log(id);\n\n  const organizer = data.competition[0].organizer;\n  const challenged = data.competition[0].challenged;\n\n  console.log(organizer);\n  console.log(challenged);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await ChallengeUpdate({\n        variables: { _id: id, victor: formState.victor, organizerScore: formState.organizerScore, challengedScore: formState.challengedScore, status: formState.status, resultsConfirmed: formState.resultsConfirmed },\n      });\n     \n      console.log(mutationResponse);\n\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n    return (\n      <Card>\n      <Card.Img src=\"/img/697142-1@1x.png\" alt=\"Card image\" />\n        <Card.ImgOverlay>\n\n      <h1 className=\"text-center text-white\">{data.competition[0].category}</h1>\n     <Form onSubmit={handleFormSubmit} className=\"signUp-form text-white\">\n        <h1 className=\"font-weight-bold text-center text-white\">{organizer} vs. {challenged}\n        </h1>\n      <Form.Group>\n        <Form.Select \n            aria-label=\"Victor\" \n            id=\"victor\"\n            name=\"victor\"\n            onChange={(selected) => {\n              const victor = selected.target.value;\n              setFormState({\n                ...formState,\n                victor: victor,\n              });\n            }}>\n          <option>Select A Victor</option>\n          <option key={organizer} value={organizer}>{organizer}</option>\n          <option key={challenged} value={challenged}>{challenged}</option>\n          <option key=\"draw\" value=\"draw\">Tie</option>\n          </Form.Select>\n          </Form.Group>\n        <Form.Group>\n          <Form.Label>Score</Form.Label>\n          <Form.Control \n          name=\"organizerScore\"\n          type=\"text\"\n          placeholder=\"Organizer Score\"\n          id=\"organizerScore\"\n          onChange={handleChange} />\n          <Form.Control \n          name=\"challengedScore\"\n          type=\"text\" \n          placeholder=\"Challenged Score\"\n          id=\"challengedScore\"\n          onChange={handleChange} />\n        </Form.Group>\n        <Form.Group className=\"mb-3\"  controlId=\"formBasicCheckbox\">\n        <Form.Check \n        type=\"checkbox\" \n        name=\"resultsConfirmed\" \n        id=\"resultsConfirmed\"\n        label=\"Results Confirmed\"\n        onChange={handleChange} />\n      </Form.Group>\n\n        <Button type=\"submit\" className=\"btn-lg\">\n          Submit Results\n         </Button>\n       \n      \n\n      </Form>\n\n      </Card.ImgOverlay>\n\n      </Card>\n    );\n  }\n\nexport default ChallengePage;\n\n","import React, { Component } from 'react';\n\nclass FindUser extends Component {\n  render() {\n    return (\n      <>\n\n        <h1>Hi here is our APP</h1>\n      </>\n    )\n    \n    \n  }\n}\n\nexport default FindUser\n\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink, useQuery } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport Auth from './utils/auth';\n\nimport HomePage from './components/HomePage';\nimport UserPage from './components/UserPage';\nimport Login from './components/Login';\nimport SignUp from './components/SignUp';\nimport ChallengeCreate from './components/ChallengeCreate';\nimport ChallengePage from './components/ChallengePage';\nimport FindUser from './components/FindUser';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    \n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-center align-center min-100-vh bg-dark\">\n\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Container>\n            {/* <Navbar.Brand href=\"/HomePage\">GameOn</Navbar.Brand> */}\n            <Navbar.Brand href=\"/\">\n              <img\n                src=\"/img/GameOnLogo.svg\"\n                width=\"300\"\n                height=\"100\"\n                className=\"d-inline-block align-top\"\n                alt=\"GameOn logo\"\n              />\n            </Navbar.Brand>\n            <Nav className=\"justify-content-end\">\n              <Nav.Link href=\"/UserPage\">UserPage</Nav.Link>\n              {Auth.loggedIn() ? (<Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n              ) : (<Nav.Link href=\"/Login\">Login</Nav.Link>)}\n            </Nav>\n          </Container>\n        </Navbar>\n        \n        <Container fluid>\n          <Row>\n            <Col>\n              <Switch>\n\n                <Route exact path=\"/\" component={HomePage}>\n\n                </Route>\n\n                <Route exact path=\"/signup\" component={SignUp}>\n\n                </Route>\n                   \n                <Route exact path=\"/HomePage\">\n                   <HomePage />\n                </Route>\n\n                <Route exact path=\"/login\">\n                  <Login />\n                </Route>\n\n                <Route exact path=\"/userpage\" component={UserPage}>\n                </Route>\n\n                <Route exact path=\"/userpage/:id\">\n\n                  <UserPage />\n                </Route>\n\n                <Route exact path=\"/finduser\">\n                  <FindUser />\n                </Route>\n\n                <Route exact path=\"/challengecreate\">\n                  <ChallengeCreate />\n                </Route>\n\n                <Route exact path=\"/challengepage\">\n                  <ChallengePage />\n                </Route>\n\n                <Route exact path=\"/challengepage/:id\">\n                  <ChallengePage />\n                </Route>\n              \n              </Switch>\n\n            </Col>\n          </Row>\n        </Container>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n};\n\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport './App.css';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport {rootReducer} from './reducers';\nimport {createLogger} from 'redux-logger';\n\nconst loggerMIddleware = createLogger();\n\nconst store = createStore(rootReducer, applyMiddleware(loggerMIddleware)); \n\nReactDOM.render(\n  <Provider store = {store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n\nreportWebVitals();\n","export const rootReducer = (state = {}, action) => {\n  return state;\n}"],"sourceRoot":""}