{"version":3,"file":"react-hook-use-service-worker.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { register, unregister } from 'register-service-worker';\n\nexport const SERVICE_WORKER_READY = 'SERVICE_WORKER_READY';\nexport const SERVICE_WORKER_REGISTERED = 'SERVICE_WORKER_REGISTERED';\nexport const SERVICE_WORKER_CACHED = 'SERVICE_WORKER_CACHED';\nexport const SERVICE_WORKER_UPDATE_FOUND = 'SERVICE_WORKER_UPDATE_FOUND';\nexport const SERVICE_WORKER_OFFLINE = 'SERVICE_WORKER_OFFLINE';\nexport const SERVICE_WORKER_UPDATE_READY = 'SERVICE_WORKER_UPDATE_READY';\nexport const SERVICE_WORKER_ERROR = 'SERVICE_WORKER_ERROR';\n\ninterface ServiceWorkerReady {\n  type: typeof SERVICE_WORKER_READY;\n  payload: ServiceWorker;\n}\ninterface ServiceWorkerRegistered {\n  type: typeof SERVICE_WORKER_REGISTERED;\n  payload: ServiceWorker;\n}\ninterface ServiceWorkerCached {\n  type: typeof SERVICE_WORKER_CACHED;\n  payload: ServiceWorker;\n}\ninterface ServiceWorkerUpdateFound {\n  type: typeof SERVICE_WORKER_UPDATE_FOUND;\n  payload: ServiceWorker;\n}\ninterface ServiceWorkerOffline {\n  type: typeof SERVICE_WORKER_OFFLINE;\n  payload: ServiceWorker;\n}\ninterface ServiceWorkerUpdateReady {\n  type: typeof SERVICE_WORKER_UPDATE_READY;\n  payload: ServiceWorker;\n}\ninterface ServiceWorkerError {\n  type: typeof SERVICE_WORKER_ERROR;\n  payload: ServiceWorker;\n}\n\nexport type ServiceWorkerActionTypes =\n  | ServiceWorkerReady\n  | ServiceWorkerRegistered\n  | ServiceWorkerCached\n  | ServiceWorkerUpdateFound\n  | ServiceWorkerOffline\n  | ServiceWorkerUpdateReady\n  | ServiceWorkerError;\n\ntype ServiceWorkerStatus =\n  | 'offline'\n  | 'registered'\n  | 'register'\n  | 'ready'\n  | 'cached'\n  | 'updates'\n  | 'updated'\n  | 'error';\n\nexport interface ServiceWorker {\n  serviceWorkerStatus: ServiceWorkerStatus;\n  registration?: null | ServiceWorkerRegistration;\n  error?: Error;\n}\n\nexport interface ServiceWorkerState {\n  serviceWorkerStatus: ServiceWorkerStatus;\n  registration?: null | ServiceWorkerRegistration;\n  error?: Error;\n}\n\nconst useServiceWorkerReducer = (\n  state: ServiceWorkerState,\n  action: ServiceWorkerActionTypes\n): ServiceWorkerState => {\n  switch (action.type) {\n    case 'SERVICE_WORKER_READY':\n      console.log('Service worker is ready.');\n      return {\n        ...state,\n        serviceWorkerStatus: action.payload.serviceWorkerStatus,\n        registration: action.payload.registration,\n      };\n    case 'SERVICE_WORKER_REGISTERED':\n      console.log('Service worker has been registered.');\n      return {\n        ...state,\n        serviceWorkerStatus: action.payload.serviceWorkerStatus,\n        registration: action.payload.registration,\n      };\n    case 'SERVICE_WORKER_CACHED':\n      console.log('Content has been cached for offline use.');\n      return {\n        ...state,\n        serviceWorkerStatus: action.payload.serviceWorkerStatus,\n        registration: action.payload.registration,\n      };\n    case 'SERVICE_WORKER_UPDATE_FOUND':\n      console.log('New content is downloading.');\n      return {\n        ...state,\n        serviceWorkerStatus: action.payload.serviceWorkerStatus,\n        registration: action.payload.registration,\n      };\n    case 'SERVICE_WORKER_UPDATE_READY':\n      console.log('New content is available; please refresh.');\n      return {\n        ...state,\n        serviceWorkerStatus: action.payload.serviceWorkerStatus,\n        registration: action.payload.registration,\n      };\n    case 'SERVICE_WORKER_OFFLINE':\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n      return {\n        ...state,\n        serviceWorkerStatus: action.payload.serviceWorkerStatus,\n      };\n    case 'SERVICE_WORKER_ERROR':\n      console.error(\n        'Error during service worker registration:',\n        action.payload.error\n      );\n      return {\n        ...state,\n        serviceWorkerStatus: action.payload.serviceWorkerStatus,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst initialState: ServiceWorkerState = {\n  registration: null,\n  serviceWorkerStatus: 'register',\n};\nconst serviceWorkerContext = React.createContext(initialState);\n\nexport function ProvideServiceWorker({\n  children,\n  fileName,\n}: {\n  children: React.ReactNode;\n  fileName: string;\n}) {\n  const serviceWorker = useProvideServiceWorker(fileName);\n  return (\n    <serviceWorkerContext.Provider value={serviceWorker}>\n      {children}\n    </serviceWorkerContext.Provider>\n  );\n}\n\nexport const useServiceWorker = () => {\n  return React.useContext(serviceWorkerContext);\n};\n\nconst useProvideServiceWorker = (file = 'sw.js') => {\n  const [swState, dispatch] = React.useReducer(\n    useServiceWorkerReducer,\n    initialState\n  );\n  React.useEffect(() => {\n    register(file, {\n      ready: registration => {\n        dispatch({\n          type: 'SERVICE_WORKER_READY',\n          payload: { serviceWorkerStatus: 'ready', registration },\n        });\n      },\n      registered: registration => {\n        dispatch({\n          type: 'SERVICE_WORKER_REGISTERED',\n          payload: { serviceWorkerStatus: 'registered', registration },\n        });\n      },\n      cached: registration => {\n        dispatch({\n          type: 'SERVICE_WORKER_REGISTERED',\n          payload: { serviceWorkerStatus: 'cached', registration },\n        });\n      },\n      updatefound: registration => {\n        dispatch({\n          type: 'SERVICE_WORKER_UPDATE_FOUND',\n          payload: { serviceWorkerStatus: 'updates', registration },\n        });\n      },\n      updated: registration =>\n        dispatch({\n          type: 'SERVICE_WORKER_UPDATE_READY',\n          payload: { serviceWorkerStatus: 'updated', registration },\n        }),\n      offline: () => {\n        dispatch({\n          type: 'SERVICE_WORKER_OFFLINE',\n          payload: { serviceWorkerStatus: 'offline' },\n        });\n      },\n      error: error =>\n        dispatch({\n          type: 'SERVICE_WORKER_OFFLINE',\n          payload: { serviceWorkerStatus: 'error', error },\n        }),\n    });\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return swState;\n};\n"],"names":["useServiceWorkerReducer","state","action","type","console","log","serviceWorkerStatus","payload","registration","error","initialState","serviceWorkerContext","React","children","serviceWorker","file","swState","dispatch","register","ready","registered","cached","updatefound","updated","offline","unregister","useProvideServiceWorker","fileName","Provider","value"],"mappings":"mVAwEMA,EAA0B,SAC9BC,EACAC,UAEQA,EAAOC,UACR,8BACHC,QAAQC,IAAI,iCAEPJ,GACHK,oBAAqBJ,EAAOK,QAAQD,oBACpCE,aAAcN,EAAOK,QAAQC,mBAE5B,mCACHJ,QAAQC,IAAI,4CAEPJ,GACHK,oBAAqBJ,EAAOK,QAAQD,oBACpCE,aAAcN,EAAOK,QAAQC,mBAE5B,+BACHJ,QAAQC,IAAI,iDAEPJ,GACHK,oBAAqBJ,EAAOK,QAAQD,oBACpCE,aAAcN,EAAOK,QAAQC,mBAE5B,qCACHJ,QAAQC,IAAI,oCAEPJ,GACHK,oBAAqBJ,EAAOK,QAAQD,oBACpCE,aAAcN,EAAOK,QAAQC,mBAE5B,qCACHJ,QAAQC,IAAI,kDAEPJ,GACHK,oBAAqBJ,EAAOK,QAAQD,oBACpCE,aAAcN,EAAOK,QAAQC,mBAE5B,gCACHJ,QAAQC,IACN,sEAGGJ,GACHK,oBAAqBJ,EAAOK,QAAQD,0BAEnC,8BACHF,QAAQK,MACN,4CACAP,EAAOK,QAAQE,YAGZR,GACHK,oBAAqBJ,EAAOK,QAAQD,qCAI/BL,IAIPS,EAAmC,CACvCF,aAAc,KACdF,oBAAqB,YAEjBK,EAAuBC,gBAAoBF,gDAG/CG,IAAAA,SAMMC,EAYwB,SAACC,YAAAA,IAAAA,EAAO,eACVH,aAC1BZ,EACAU,GAFKM,OAASC,cAIhBL,aAAgB,kBACdM,WAASH,EAAM,CACbI,MAAO,SAAAX,GACLS,EAAS,CACPd,KAAM,uBACNI,QAAS,CAAED,oBAAqB,QAASE,aAAAA,MAG7CY,WAAY,SAAAZ,GACVS,EAAS,CACPd,KAAM,4BACNI,QAAS,CAAED,oBAAqB,aAAcE,aAAAA,MAGlDa,OAAQ,SAAAb,GACNS,EAAS,CACPd,KAAM,4BACNI,QAAS,CAAED,oBAAqB,SAAUE,aAAAA,MAG9Cc,YAAa,SAAAd,GACXS,EAAS,CACPd,KAAM,8BACNI,QAAS,CAAED,oBAAqB,UAAWE,aAAAA,MAG/Ce,QAAS,SAAAf,UACPS,EAAS,CACPd,KAAM,8BACNI,QAAS,CAAED,oBAAqB,UAAWE,aAAAA,MAE/CgB,QAAS,WACPP,EAAS,CACPd,KAAM,yBACNI,QAAS,CAAED,oBAAqB,cAGpCG,MAAO,SAAAA,UACLQ,EAAS,CACPd,KAAM,yBACNI,QAAS,CAAED,oBAAqB,QAASG,MAAAA,QAGxC,WACLgB,kBAED,IAEIT,EAjEeU,GALtBC,iBAOEf,gBAACD,EAAqBiB,UAASC,MAAOf,GACnCD,kCAjJ8B,qDAID,sDAFE,sDAJF,yDACK,gEAEE,kEAEA,uDAmJX,kBACvBD,aAAiBD"}