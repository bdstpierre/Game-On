import { createElement, useContext, useReducer, useEffect, createContext } from 'react';
import { register, unregister } from 'register-service-worker';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var SERVICE_WORKER_READY = 'SERVICE_WORKER_READY';
var SERVICE_WORKER_REGISTERED = 'SERVICE_WORKER_REGISTERED';
var SERVICE_WORKER_CACHED = 'SERVICE_WORKER_CACHED';
var SERVICE_WORKER_UPDATE_FOUND = 'SERVICE_WORKER_UPDATE_FOUND';
var SERVICE_WORKER_OFFLINE = 'SERVICE_WORKER_OFFLINE';
var SERVICE_WORKER_UPDATE_READY = 'SERVICE_WORKER_UPDATE_READY';
var SERVICE_WORKER_ERROR = 'SERVICE_WORKER_ERROR';

var useServiceWorkerReducer = function useServiceWorkerReducer(state, action) {
  switch (action.type) {
    case 'SERVICE_WORKER_READY':
      console.log('Service worker is ready.');
      return _extends({}, state, {
        serviceWorkerStatus: action.payload.serviceWorkerStatus,
        registration: action.payload.registration
      });

    case 'SERVICE_WORKER_REGISTERED':
      console.log('Service worker has been registered.');
      return _extends({}, state, {
        serviceWorkerStatus: action.payload.serviceWorkerStatus,
        registration: action.payload.registration
      });

    case 'SERVICE_WORKER_CACHED':
      console.log('Content has been cached for offline use.');
      return _extends({}, state, {
        serviceWorkerStatus: action.payload.serviceWorkerStatus,
        registration: action.payload.registration
      });

    case 'SERVICE_WORKER_UPDATE_FOUND':
      console.log('New content is downloading.');
      return _extends({}, state, {
        serviceWorkerStatus: action.payload.serviceWorkerStatus,
        registration: action.payload.registration
      });

    case 'SERVICE_WORKER_UPDATE_READY':
      console.log('New content is available; please refresh.');
      return _extends({}, state, {
        serviceWorkerStatus: action.payload.serviceWorkerStatus,
        registration: action.payload.registration
      });

    case 'SERVICE_WORKER_OFFLINE':
      console.log('No internet connection found. App is running in offline mode.');
      return _extends({}, state, {
        serviceWorkerStatus: action.payload.serviceWorkerStatus
      });

    case 'SERVICE_WORKER_ERROR':
      console.error('Error during service worker registration:', action.payload.error);
      return _extends({}, state, {
        serviceWorkerStatus: action.payload.serviceWorkerStatus
      });

    default:
      return state;
  }
};

var initialState = {
  registration: null,
  serviceWorkerStatus: 'register'
};
var serviceWorkerContext =
/*#__PURE__*/
createContext(initialState);
function ProvideServiceWorker(_ref) {
  var children = _ref.children,
      fileName = _ref.fileName;
  var serviceWorker = useProvideServiceWorker(fileName);
  return createElement(serviceWorkerContext.Provider, {
    value: serviceWorker
  }, children);
}
var useServiceWorker = function useServiceWorker() {
  return useContext(serviceWorkerContext);
};

var useProvideServiceWorker = function useProvideServiceWorker(file) {
  if (file === void 0) {
    file = 'sw.js';
  }

  var _React$useReducer = useReducer(useServiceWorkerReducer, initialState),
      swState = _React$useReducer[0],
      dispatch = _React$useReducer[1];

  useEffect(function () {
    register(file, {
      ready: function ready(registration) {
        dispatch({
          type: 'SERVICE_WORKER_READY',
          payload: {
            serviceWorkerStatus: 'ready',
            registration: registration
          }
        });
      },
      registered: function registered(registration) {
        dispatch({
          type: 'SERVICE_WORKER_REGISTERED',
          payload: {
            serviceWorkerStatus: 'registered',
            registration: registration
          }
        });
      },
      cached: function cached(registration) {
        dispatch({
          type: 'SERVICE_WORKER_REGISTERED',
          payload: {
            serviceWorkerStatus: 'cached',
            registration: registration
          }
        });
      },
      updatefound: function updatefound(registration) {
        dispatch({
          type: 'SERVICE_WORKER_UPDATE_FOUND',
          payload: {
            serviceWorkerStatus: 'updates',
            registration: registration
          }
        });
      },
      updated: function updated(registration) {
        return dispatch({
          type: 'SERVICE_WORKER_UPDATE_READY',
          payload: {
            serviceWorkerStatus: 'updated',
            registration: registration
          }
        });
      },
      offline: function offline() {
        dispatch({
          type: 'SERVICE_WORKER_OFFLINE',
          payload: {
            serviceWorkerStatus: 'offline'
          }
        });
      },
      error: function error(_error) {
        return dispatch({
          type: 'SERVICE_WORKER_OFFLINE',
          payload: {
            serviceWorkerStatus: 'error',
            error: _error
          }
        });
      }
    });
    return function () {
      unregister();
    };
  }, []);
  return swState;
};

export { ProvideServiceWorker, SERVICE_WORKER_CACHED, SERVICE_WORKER_ERROR, SERVICE_WORKER_OFFLINE, SERVICE_WORKER_READY, SERVICE_WORKER_REGISTERED, SERVICE_WORKER_UPDATE_FOUND, SERVICE_WORKER_UPDATE_READY, useServiceWorker };
//# sourceMappingURL=react-hook-use-service-worker.esm.js.map
